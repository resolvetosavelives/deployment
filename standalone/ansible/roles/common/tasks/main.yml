---
- name: update apt cache
  apt: update_cache=yes
  become: true

- name: install aptitude
  apt: name=aptitude state=present
  become: true

- name: upgrade the distro
  apt: upgrade=safe
  become: true

- name: install common packages
  apt: 
    pkg:
      - apache2-utils
      - build-essential
      - cron
      - fail2ban
      - git-core
      - htop
      - less
      - libcurl4-openssl-dev
      - libffi-dev
      - libmagickwand-dev
      - libreadline-dev
      - libsqlite3-dev
      - libssl-dev
      - libxml2-dev
      - libxslt1-dev
      - libyaml-dev
      - logrotate
      - python-pexpect
      - python-software-properties
      - redis-tools
      - sqlite3
      - unattended-upgrades
      - vim
      - wget
      - xvfb
      - zlib1g-dev
      - zsh
    state: latest
  become: true

- name: update hostname
  hostname:
    name: "{{ inventory_hostname }}"
  become: true

- name: add hostname to /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: '^127\.0\.0\.1[ \t]+localhost'
    line: '127.0.0.1 localhost {{ inventory_hostname }}'
    state: present
  become: true

- name: Reboot system if required
  shell: sleep 2 && shutdown -r now 'Rebooting to complete system upgrade'
  async: 1
  poll: 0
  args:
    removes: /var/run/reboot-required
  become: true
  register: restart_system

- name: Wait for server to restart
  local_action: wait_for host={{ inventory_hostname }} port={{ ansible_port }} delay=2 timeout=3000
  when: restart_system.changed

- name: ensure fail2ban is running
  become: true
  action: service name=fail2ban state=restarted enabled=yes

- name: configure sshd
  copy: src=etc/ssh/sshd_config dest=/etc/ssh/sshd_config
  become: true
  notify: restart ssh

# - name: set up logrotate
#   copy: src={{ item }} dest=/etc/logrotate.d/ owner=root
#   with_fileglob:
#     - etc/logrotate.d/*
#   become: true

# - name: set up s3cmd
#   copy: src=.s3cfg dest=/root/.s3cfg
#   become: true

- name: Ensure group "deploy" exists
  group:
    name: deploy
    state: present
  become: true

- name: create deploy user
  user:
    name: deploy
    group: deploy
    shell: /bin/bash
  become: true


- name: enable systemctl services for deploy user
  become: true
  shell: loginctl enable-linger deploy
